{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Master Template",
  "Parameters": {
    "ProjectName": {
      "Type": "String",
      "Description": "App Name.",
      "Default": "project"
    },
    "Environment": {
      "Type": "String",
      "Description": "Environment name."
    },
    "BucketArtifactName": {
      "Type": "String",
      "Description": "Bucket where all artifacts will be saved.",
      "Default": ""
    }
  },
  "Resources": {
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaLogPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeInstances",
                    "ec2:AttachNetworkInterface"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaVpcPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters",
                    "ssm:GetParameter"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaSSMPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution",
                    "states:StartSyncExecution"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaStateMachinePermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaDynamoDBStreamPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "apigateway:GET",
                  "Resource": [
                    "arn:aws:apigateway:*::/restapis/*/deployments/*",
                    "arn:aws:apigateway:*::/restapis/*/stages/*",
                    "arn:aws:apigateway:*::/apikeys/*",
                    "arn:aws:apigateway:*::/usageplans",
                    "arn:aws:apigateway:*::/apikeys",
                    "arn:aws:apigateway:*::/restapis/*/deployments",
                    "arn:aws:apigateway:*::/usageplans/*/keys/*",
                    "arn:aws:apigateway:*::/restapis/*/stages",
                    "arn:aws:apigateway:*::/usageplans/*/keys"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "apigateway:GET"
                  ],
                  "Resource": [
                    "arn:aws:apigateway:*::/usageplans/*"
                  ]
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaUsagePlanPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetResourcePolicy",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:ListSecretVersionIds"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetRandomPassword",
                    "secretsmanager:ListSecrets"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaSecretsManagerPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "kms:*",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaKmsPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:*"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-lambdaSqsPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-x-ray-access"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*",
                    "s3-object-lambda:*"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-s3-log-access"
            }
          }
        ]
      }
    },
    "LYSCore": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "python3.9"
        ],
        "Content": "../src/layers",
        "LayerName": {
          "Fn::Sub": "${Environment}-${ProjectName}-layer"
        }
      }
    },
    "LmdGetTest": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "../src/lambdas/get_test",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        },
        "FunctionName": {
          "Fn::Sub": "${Environment}-${ProjectName}-get_test"
        },
        "MemorySize": 128,
        "Timeout": 30
      }
    },
    "LmdGetDev": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "../src/lambdas/get_dev",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "Role",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "TracingConfig": {
          "Mode": "Active"
        },
        "FunctionName": {
          "Fn::Sub": "${Environment}-${ProjectName}-get_dev"
        },
        "MemorySize": 128,
        "Timeout": 30,
        "Layers": [
          {
            "Ref": "LYSCore"
          }
        ]
      }
    },
    "ROLApi": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-ApiInvokeLambdaPermission"
            }
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Environment}-${ProjectName}-ApiLogPermission"
            }
          }
        ]
      }
    },
    "APIG": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "Fn::Transform": {
            "Name": "AWS::Include",
            "Parameters": {
              "Location": "../src/api.json"
            }
          }
        },
        "Name": {
          "Fn::Sub": "${Environment}-${ProjectName}"
        },
        "Parameters": {
          "endpointConfigurationTypes": "REGIONAL"
        }
      }
    },
    "APIResourceLmdGetDev": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "APIG"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "APIG",
            "RootResourceId"
          ]
        },
        "PathPart": "getdev"
      },
      "DependsOn": [
        "APIG"
      ]
    },
    "APIMethodLmdGetDev": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "APIG"
        },
        "ResourceId": {
          "Ref": "APIResourceLmdGetDev"
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "IntegrationHttpMethod": "GET",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations",
              {
                "LambdaFuncNameArn": {
                  "Fn::GetAtt": [
                    "LmdGetDev",
                    "Arn"
                  ]
                }
              }
            ]
          }
        }
      },
      "DependsOn": [
        "APIResourceLmdGetDev"
      ]
    },
    "DAPIGprojectback": {
      "DependsOn": "APIG",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "APIG"
        }
      },
      "DeletionPolicy": "Retain"
    },
    "LGAPI": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 365
      },
      "DeletionPolicy": "Retain"
    },
    "SAPIGprojectback": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "APIG"
        },
        "DeploymentId": {
          "Ref": "DAPIGprojectback"
        },
        "StageName": {
          "Ref": "Environment"
        },
        "TracingEnabled": true,
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "LGAPI",
              "Arn"
            ]
          },
          "Format": "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user', 'requestTime':'$context.requestTime', 'httpMethod':'$context.httpMethod', 'resourcePath':'$context.resourcePath', 'status':'$context.status', 'protocol':'$context.protocol', 'responseLength':'$context.responseLength'}"
        }
      }
    },
    "UP": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "APIG"
            },
            "Stage": {
              "Ref": "SAPIGprojectback"
            }
          }
        ],
        "Description": "Custom project usage plan",
        "UsagePlanName": {
          "Fn::Sub": "${Environment}-${ProjectName}-Plan"
        }
      }
    },
    "KAPIGprojectback": {
      "Type": "AWS::ApiGateway::ApiKey",
      "DependsOn": [
        "DAPIGprojectback",
        "APIG"
      ],
      "Properties": {
        "Name": {
          "Fn::Sub": "${Environment}-${ProjectName}-ApiKey"
        },
        "Description": "CloudFormation API Key V1",
        "Enabled": true,
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "APIG"
            },
            "StageName": {
              "Ref": "SAPIGprojectback"
            }
          }
        ]
      }
    },
    "UPK": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {
          "Ref": "KAPIGprojectback"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "UP"
        }
      }
    },
    "APIAccount": {
      "DependsOn": "ROLApi",
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ROLApi",
            "Arn"
          ]
        }
      }
    },
    
    "StackVPCMyData": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://{{resolve:ssm:/config/${Environment}/infra/bucket/artifacts}}.s3.${AWS::URLSuffix}/deploys/project/vpc.yaml"
        },
        "Parameters": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "Environment"
                },
                {
                  "Ref": "ProjectName"
                },
                "mydata"
              ]
            ]
          },
          "VpcCIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr"
          },
          "PrivateSubnetACIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-private-subnet-a"
          },
          "PrivateSubnetBCIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-private-subnet-b"
          },
          "PrivateSubnetCCIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-private-subnet-c"
          },
          "PublicSubnetACIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-public-subnet-a"
          },
          "PublicSubnetBCIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-public-subnet-b"
          },
          "PublicSubnetCCIDR": {
            "Fn::Sub": "/config/infra/${ProjectName}/vpc-mydata/cidr-public-subnet-c"
          }
        },
        "TimeoutInMinutes": 60
      }
    },
    "StackNatIG": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://{{resolve:ssm:/config/${Environment}/infra/bucket/artifacts}}.s3.${AWS::URLSuffix}/deploys/project/nat-ig-gateways.yaml"
        },
        "Parameters": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "Environment"
                },
                {
                  "Ref": "ProjectName"
                },
                "mydata"
              ]
            ]
          },
          "VPCID": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.VPCID"
            ]
          },
          "PublicSubnetA": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetA"
            ]
          },
          "PublicSubnetB": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetB"
            ]
          },
          "PublicSubnetC": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetC"
            ]
          }
        },
        "TimeoutInMinutes": 60
      }
    },
    "StackAccessRulesMyData": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://{{resolve:ssm:/config/${Environment}/infra/bucket/artifacts}}.s3.${AWS::URLSuffix}/deploys/project/access-rules.yaml"
        },
        "Parameters": {
          "Name": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "Environment"
                },
                {
                  "Ref": "ProjectName"
                },
                "mydata"
              ]
            ]
          },
          "VPCID": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.VPCID"
            ]
          },
          "PrivateSubnetA": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PrivateSubnetA"
            ]
          },
          "PrivateSubnetB": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PrivateSubnetB"
            ]
          },
          "PrivateSubnetC": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PrivateSubnetC"
            ]
          },
          "PublicSubnetA": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetA"
            ]
          },
          "PublicSubnetB": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetB"
            ]
          },
          "PublicSubnetC": {
            "Fn::GetAtt": [
              "StackVPCMyData",
              "Outputs.PublicSubnetC"
            ]
          },
          "InternetGateway": {
            "Fn::GetAtt": [
              "StackNatIG",
              "Outputs.InternetGateway"
            ]
          },
          "NatGatewayA": {
            "Fn::GetAtt": [
              "StackNatIG",
              "Outputs.NatGatewayA"
            ]
          },
          "NatGatewayB": {
            "Fn::GetAtt": [
              "StackNatIG",
              "Outputs.NatGatewayB"
            ]
          },
          "NatGatewayC": {
            "Fn::GetAtt": [
              "StackNatIG",
              "Outputs.NatGatewayC"
            ]
          }
        },
        "TimeoutInMinutes": 60
      }
    }
  }
}